/*
 * SingleEncrypterFrame.java
 *
 * Created on March 10, 2008, 2:03 PM
 */

package com.megaware.multipleencrypter.frames;

import com.megaware.multipleencrypter.methods.SingleEncryptionAlgorithmMethods;
import com.megaware.multipleencrypter.methods.GeneralMethods;
import com.megaware.multipleencrypter.objects.EncryptedFileObject;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.*;
import javax.swing.text.*;

/**
 *
 * @author  sandeep
 */
public class ChildEncrypterFrame extends javax.swing.JInternalFrame {
    
    /** Creates new form SingleEncrypterFrame */
    public ChildEncrypterFrame() {
        initComponents();
        initializeText();        
        setWindowLocation();
    }
    
    public ChildEncrypterFrame(MultipleEncrypterFrame frame) {
        this.frame=frame;
        initComponents();
        initializeText();             
        setWindowLocation();       
    }
    
    protected void setWindowLocation() {
        setLocation(currX,currY);
        currX+=20;
        currY+=20;
        if(currX>=500) {
            currX=5;            
        }           
        if(currY>=200) {
            currY=5;
        }
    }

    

    private void closeWindow() {
        setVisible(false);
        dispose();
    }
    
    //undoable lister classes
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtText = new javax.swing.JTextPane();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        getContentPane().setLayout(new java.awt.BorderLayout(0, 10));

        jPanel1.setLayout(new java.awt.BorderLayout());

        btnEncrypt.setText("ENCRYPT");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });
        jPanel1.add(btnEncrypt, java.awt.BorderLayout.LINE_START);

        btnDecrypt.setText("DECRYPT");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });
        jPanel1.add(btnDecrypt, java.awt.BorderLayout.LINE_END);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.BorderLayout());

        txtText.setBackground(java.awt.Color.white);
        jScrollPane1.setViewportView(txtText);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-432)/2, (screenSize.height-315)/2, 432, 315);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        startEncryption();
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        startDecryption();        
    }//GEN-LAST:event_btnDecryptActionPerformed
     public void resetUndoManager()
     {
        undo.discardAllEdits();
        undoAction.updateUndoState();
        redoAction.updateRedoState();  	
     }
     
     protected boolean openFile() {            
         File file=new GeneralMethods().getFile(title,
                 javax.swing.JFileChooser.FILES_ONLY,
                 javax.swing.JFileChooser.OPEN_DIALOG);
         
         if(file!=null) {
             // check if the file is encrypted file
             /*** IF THE FILE IS WITH EXTENSION .MENCF THEN THE FILE IS ENCRYPTED
              *   AND SHOULD BE READ AS AN OBJECT AND SET THE STATUS FLAG
              *   encrypted =  true;
              */
             if(file.getPath().endsWith(".MENCF")) {
                 EncryptedFileObject object=new GeneralMethods().readEncryptedFileObject(
                         file.getPath());
                 if(object==null) {
                     new GeneralMethods().showErrorMessage("File read error occured");
                     return false;
                 }
                 this.setText(object.getContent());
                 this.setEncObject(object);    
                 
                 // set the file as encrypted
                 this.setEncrypted(true);
             }
             else {
                 /** READ AS NORMAL TEXT BASED FILE */
                 String content=new GeneralMethods().readFileContent(file);
                 if(content==null) {
                     new GeneralMethods().showErrorMessage("File read error occured");
                     return false;
                 }             
                 // set the file as normal
                 this.setEncrypted(false);
                 this.setText(content);             
                 
             }
             
             
             setSaved(true);
             savedbefore=true;
             savedpath=file.getPath();      
             setTitle(savedpath);
             return true;
         }         
         else {
             return false;
         }
     }
     
     // function to select all the content of the text area
     public void selectAllText() {
        txtText.selectAll();        
     }
     
     // function to start a new file
     protected void newFile() {
        frame.changeMenuItemState(1);
        setSaved(false);
        savedbefore=false;
        savedpath="";     
        this.setEncrypted(false);
        this.setDecryptionComponentControlState(false);
        this.setEncryptionComponentControlState(false);        
        // increment the windowindex
        windowindex++;
        setWindowTitle();        
     }
     
     public void setEditorFont(java.awt.Font font) {
        txtText.setFont(font);
     }
      
     // function to check if the file is saved and if not take 
     // the appropriate action based on the used option given
     protected boolean checkFileSaved() {
        if(getText().equals("")||isSaved()==true) return true;
        
        else if(isSaved()==false&&savedbefore==false) {
            //it's a new file not yet saved    
            String msg="The file is not saved yet.\n Do you want to save it before close?";
            String caption="Save File";
            int retval=new  GeneralMethods().showConfirmationDialog(msg,caption);
            if(retval==JOptionPane.YES_OPTION) {
                boolean saved=saveFile(null);
                return saved;
            }
            else if(retval==JOptionPane.NO_OPTION) {
                return true;
            }
            else {
                return false;
            }
        }
        
        else if(savedbefore==true) {
            // the file is already saved and the file can be saved
            // to the saved path
            String msg="Do you want to save the file?.";
            String caption="Save File";
            int retval=new GeneralMethods().showConfirmationDialog(msg, caption);
            if(retval==JOptionPane.YES_OPTION) {
                saveFile(savedpath);
                return true;
            }
            else if(retval==JOptionPane.NO_OPTION) {
                return true;
            }
            else {
                return false;
            }
        }        
        return false;
     }
     
     // function to return the text in the document
     public String getText() {
        try {
            return doc.getText(0, doc.getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(ChildEncrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
     }
     
     
     // function to set the text of the document of this textarea
     public void setText(String text) {
        try {
            //doc.replace(0, doc.getLength(), text, null);
            doc=new DefaultStyledDocument();
            doc.replace(0, 0, text, null);
            txtText.setDocument(doc);
        } catch (BadLocationException ex) {
            System.out.println("exception "+ex);
            Logger.getLogger(ChildEncrypterFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
     // function to return the textpane used by this window
     public javax.swing.JTextPane getTextPane() {
         return txtText;
     }
     
     
     // function to set the title of the window using the savedpath
     protected void setWindowTitle() {
         if(savedbefore==true) {
             this.setTitle(new File(savedpath).getName());
         }
         else {
             this.setTitle("NEWFILE"+Integer.toString(windowindex));
         }
     }

     
    // function to set the redo and undo acions and set the document for the
    // JTextPane
    private void initializeText() {
        doc=new DefaultStyledDocument();
        undoAction=new UndoAction();
        redoAction=new RedoAction();		
        doc.addUndoableEditListener(docListener);       
        txtText.addKeyListener(new java.awt.event.KeyAdapter(){
            public void keyTyped(java.awt.event.KeyEvent ke) {
                ChildEncrypterFrame.this.setSaved(false);                        
            }                
            
            // check if the text field is empty 
            // if yes then disable encrypt and decrypt
            // else enable encrypt if encrypted = false
            // else disable decrypted
            public void keyPressed(java.awt.event.KeyEvent ke) {
                if(txtText.getText().trim().length()==0) {
                    if(ChildEncrypterFrame.this.isEncrypted()) {
                        ChildEncrypterFrame.this.setDecryptionComponentControlState(true);
                        ChildEncrypterFrame.this.setEncryptionComponentControlState(false);
                    }
                    else {
                        ChildEncrypterFrame.this.setDecryptionComponentControlState(false);
                        ChildEncrypterFrame.this.setEncryptionComponentControlState(true);
                    }
                }
            }
        });
        txtText.setDocument(doc);
        frame.setUndoRedoAction(undoAction, redoAction);
                
        
        this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter(){
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent ie){
                ChildEncrypterFrame.this.closeFile();
            }
            
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent ie) {
                ChildEncrypterFrame.this.frame.setActiveChildWindow(ChildEncrypterFrame.this);
            }
            
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent ie) {
                ChildEncrypterFrame.this.frame.setActiveChildWindow(null);
            }
        });
    }
    
    // function to close the file after checking for the filesaved
    protected void closeFile() {
        boolean filesaved=this.checkFileSaved();
        if(filesaved==true) {
            closeWindow();
        }
    }
    
    // function to initiate the saving of file if saveas==true then
    // save to a new location else save to the existing location ie, the 
    // previous location
    public void saveEncrypterFile(boolean saveas) {             
        if(saveas==false)
        if(savedbefore==true) {            
            saveFile(savedpath);
        }
        else {
            saveFile(null);
        }
        else {
            saveFile(null);
        }
    }

    // function to save the file 
    private boolean saveFile(String filepath) {                
            File file;
            // save to a new location (ie not already saved)
            if(filepath==null) {
               file=new  GeneralMethods().getFile("Select the location and filename"
                       , javax.swing.JFileChooser.FILES_ONLY,
                       javax.swing.JFileChooser.SAVE_DIALOG); 
               if(file!=null)  {
                      if(file.exists()==true) {
                         // if the file already exists ask for the replacement confirmation
                         String msg="The file already exists.\n Are you sure you "+
                                 "want to overwrite it?.";
                         int retval=new GeneralMethods().showConfirmationDialog(msg,
                                 "File Overwrite confirm");
                         if(retval!=javax.swing.JOptionPane.YES_OPTION) return false;
                    }
                      
              }            
            }
            else {
                file=new File(filepath);
            }
            if(file==null) return false;
            else {
                String content=this.getText();
                // if encrypted ==false then save as it is
                boolean filesaved;
                if(this.isEncrypted()==false) {
                    
                    /* TO SAVE AS SEPERATE FILE  PLACE THE FOLLOWING AFTER 
                     * THE CONDITION AND COMMENT LINES /***/ /*
                     */
                    filesaved=new GeneralMethods().writeContentToFile(content
                        , file);
                    
                    // if an encrypted file is being saved after its decryption  
                    // rename it with the stored original extension
                    if(!encObject.getOriginalFileExtension().equals("")) {   
       /***/            File originalfile=new File(file.getPath());                        
                        file=new File(new GeneralMethods().setFileExtension(file,
                                encObject.getOriginalFileExtension()));                        
      /***/             originalfile.renameTo(file);
                    }     
                    
                }
                else {
                    
                    /** IF THE FILE IS ENCRYPTED FORCE TO SAVE IT ONLY WITH
                     *  MENCF EXTENSION AND AS AN OBJECT WITH THE DETAILS OF
                     *  ENCRYPTION
                     */
                    // change the extension to encrypted file extension
                    encObject.setOriginalFileExtension(
                            new GeneralMethods().getFileExtension(file));                                        
                    
                    /* COMMENT LINES STARTING WITH /***/ /* TO SAVE ENCRYPTED FILE AS SEPERATE*/
                    // save the original filename into a object
           /***/         File originalfile=new File(file.getPath());
                    
                    // save content to original filename;
                    filesaved=new GeneralMethods().saveEncryptedFile(this.getText(),
                            encObject, file);                  
                    
                    // set the file to encrypted 
                    /*** PLACE THE FOLLOWING LINE BEFORE FILESAVED LINE FOR SEPERATE SAVING*/
                    file=new File(new GeneralMethods().setFileExtension(file,"MENCF"));
                    
                    //rename the file
            /***/         originalfile.renameTo(file);
                }
                
                if(filesaved==true) {
                    setSaved(true);
                    savedbefore=true;
                    savedpath=file.getPath();
                    
                    setTitle(savedpath);                                        
                }
                else {
                    new GeneralMethods().showErrorMessage("File was not able to save");
                    return false;
                }                
            }
            return true;
    }

    public boolean isEncrypted() {
        return encrypted;
    }

    // function to set the value of encrypted boolean 
    // if encrypted == true , then the text is encrypted and the 
    // decrypt button will be enabled
    // else the text is not encrypted and the encrypt button will be enabled
    // and the decrypt button will be disabled.
    public void setEncrypted(boolean encrypted) {
        this.encrypted = encrypted;
        // when encrypted or decrypted the file gets changed hence set the 
        // saved flag to false
        setSaved(false);
        frame.setSaveMenuItemState(true);
        if(encrypted==true) {
            this.setDecryptionComponentControlState(true);
            this.setEncryptionComponentControlState(false);
        }
        else {
            this.setDecryptionComponentControlState(false);
            this.setEncryptionComponentControlState(true);
        }
    }
    
    // function to set the encryption control component state
    // aka this.btnEncrypt and parent.menuActionStartEncrypt
    public void setEncryptionComponentControlState(boolean state) {
        this.btnEncrypt.setEnabled(state);
        this.frame.setEncrytMenuItemState(state);
    }
    
    // function to set the decryption control component state
    // aka this.btnEncrypt and parent.menuActionStartEncrypt
    public void setDecryptionComponentControlState(boolean state) {
        this.btnDecrypt.setEnabled(state);
        this.frame.setDecryptMenuItemState(state);       
    }

    public EncryptedFileObject getEncObject() {
        return encObject;
    }

    public void setEncObject(EncryptedFileObject encObject) {
        this.encObject = encObject;
    }

    // function to start the encryption of the current text in the textfield    
    public void startEncryption() {
        new SingleEncryptionAlgorithmMethods().encryptText(this);
    }
    
    // function to start the decryption of the curren text in the textfield
    public void startDecryption() {
        new SingleEncryptionAlgorithmMethods().decryptText(this);
    }

    public boolean isSaved() {
        return saved;
    }

    public void setSaved(boolean saved) {
        this.saved = saved;
        frame.setSaveMenuItemState(!saved);
    }
	
 /************************ sub classes *********************************/
	
    class UndoableListener implements UndoableEditListener
    {
            public void undoableEditHappened(UndoableEditEvent uee)
            {
                    undo.addEdit(uee.getEdit());
                    undoAction.updateUndoState();
                    redoAction.updateRedoState();
            }
    }

    class UndoAction extends AbstractAction
    {
            public UndoAction()
            {
                    super("Undo");
                    setEnabled(false);
            }
            public void actionPerformed(ActionEvent ae)
            {
                    try
                    {
                            undo.undo();			
                    }catch(CannotUndoException e){
                        e.printStackTrace();
                    };
                    updateUndoState();
                    redoAction.updateRedoState();		
            }

            protected void updateUndoState()
            {
                    if(undo.canUndo())
                    {
                            setEnabled(true);
                            putValue(Action.NAME,undo.getUndoPresentationName());
                    }
                    else
                    {
                            setEnabled(false);
                            putValue(Action.NAME,"Undo");
                    }
            }
    }

    class RedoAction extends AbstractAction
    {
            public RedoAction()
            {
                    super("Redo");
                    setEnabled(false);		
            }

            public void actionPerformed(ActionEvent ae)
            {
                    try
                    {
                            undo.redo();
                    }catch(CannotRedoException e){
                        e.printStackTrace();
                    };
                    updateRedoState();
                    undoAction.updateUndoState();		
            }

            protected void updateRedoState()
            {
                    if(undo.canRedo())
                    {
                            setEnabled(true);
                            putValue(Action.NAME,undo.getRedoPresentationName());			
                    }
                    else
                    {
                            setEnabled(false);
                            putValue(Action.NAME,"Redo");
                    }
            }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane txtText;
    // End of variables declaration//GEN-END:variables
     UndoableListener docListener=new UndoableListener();
     UndoAction undoAction;
     RedoAction redoAction;
     protected UndoManager undo=new UndoManager();
     DefaultStyledDocument doc;
     MultipleEncrypterFrame frame;
     String savedpath;
     private boolean saved=false;
     boolean savedbefore=false;
     public static int windowindex=0;
     private boolean encrypted=false;
     // holds the code details used for encryption
     private EncryptedFileObject encObject=new EncryptedFileObject();
     
     // the x and y coordinates of new window
     private static int currX=5;
     
     private static int currY=5;
}
