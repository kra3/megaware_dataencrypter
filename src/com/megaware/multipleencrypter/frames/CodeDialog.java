/*
 * CodeDialog.java
 *
 * Created on March 8, 2008, 11:03 AM
 */

package com.megaware.multipleencrypter.frames;

import com.megaware.multipleencrypter.methods.SingleEncryptionAlgorithmMethods;
import com.megaware.multipleencrypter.methods.GeneralMethods;
import com.megaware.multipleencrypter.objects.CodeObject;
import java.math.BigDecimal;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author  name
 */
public class CodeDialog extends javax.swing.JDialog {
    
    /** Creates new form CodeDialog */
    public CodeDialog(java.awt.Frame parent, boolean modal,int dialogtype) {
        super(parent, modal);
        initComponents();     
        lstAlgorithms.setModel(lstAlgorithmsModel);
        setDialogType(dialogtype);
    }
   
    // function to get the actual value of the code entered in the txtCode
    // after the validation 
    // Here codedigits holds the array of digits in the code
    // The carrtemp holds the complete content of the code as array
    private void createCode(String temp, char[] carrtemp) {            
            code=new BigDecimal(temp);
            for(int i=0;i<carrtemp.length;i++)
            {
                addValueForLetter(carrtemp[i]);					 			
            }
    }

    // function to get the equation code from the equation dialog    
    private void getEquationForCode() {
        
        // if the user tried to use an equation for decryption and if the equused=false then
        // show warning and possiblity of risk. The equation is not disabled because, if the file
        // object is corrupted and the file content was able to read , then the user should be able to
        // decrypt the content without the object
        // also checking whether the details were saved
         if(dialogtype==DECRYPTION_DIALOG&&codeobject.isDetailssaved()&&this.equUsed==false) {
            String msg="This file does not seem to be encrypted using a equation.\n"+
                    "Creating an equation for a file that was not encrypted with a equation \n"+
                    "may produce wrong output.Do you want to continue any way?.";
            int retval=new GeneralMethods().showConfirmationDialog(msg, "Confirm");
            if(retval!=javax.swing.JOptionPane.YES_OPTION) {
                return;
            }
        }
        boolean codecorrect=this.getActualCode();        
        if(codecorrect==false) {
            String msg="Please enter a valid code before creating a value from equation.";
            JOptionPane.showMessageDialog(null, msg);
            return;
        }       
        EquationDialog dialog=new EquationDialog(new JFrame(),false) ;
        dialog.setText(equationstring);
        dialog.setCode(code);
        Object values[]=dialog.showDialog();
        if(values==null) return;
        equvalue=(BigDecimal)values[0];
        equationstring=values[1].toString();
        setEquationButtonCaption();
    }
    
    // function to set the caption for equation button
    protected void setEquationButtonCaption() {
        if(equationstring.equals("")) {
            btnUseEquation.setText("Use Equation");
        }
        else {
            btnUseEquation.setText("Edit Equation");
        }
    }
                
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnHint = new javax.swing.JButton();
        txtCode = new javax.swing.JPasswordField();
        lblReCode = new javax.swing.JLabel();
        txtReCode = new javax.swing.JPasswordField();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnSelectAlgorithm = new javax.swing.JButton();
        btnUseEquation = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAlgorithms = new javax.swing.JList();
        chkSaveSettings = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        lblCaption = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Code Details"));
        jPanel2.setLayout(null);

        jLabel1.setText("Enter the code:");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(20, 30, 110, 14);

        btnHint.setText("set a hint for the code");
        btnHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHintActionPerformed(evt);
            }
        });
        jPanel2.add(btnHint);
        btnHint.setBounds(170, 90, 230, 23);
        jPanel2.add(txtCode);
        txtCode.setBounds(170, 30, 230, 20);

        lblReCode.setText("Re enter code:");
        jPanel2.add(lblReCode);
        lblReCode.setBounds(20, 60, 110, 14);
        jPanel2.add(txtReCode);
        txtReCode.setBounds(170, 60, 230, 20);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 70, 420, 130);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        jPanel3.setLayout(null);

        jLabel2.setText("Algorithm Heirarchy:");
        jPanel3.add(jLabel2);
        jLabel2.setBounds(10, 20, 390, 20);

        btnSelectAlgorithm.setText("Change Algorithm Hierarchy");
        btnSelectAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAlgorithmActionPerformed(evt);
            }
        });
        jPanel3.add(btnSelectAlgorithm);
        btnSelectAlgorithm.setBounds(200, 180, 210, 23);

        btnUseEquation.setText("Use Equation");
        btnUseEquation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUseEquationActionPerformed(evt);
            }
        });
        jPanel3.add(btnUseEquation);
        btnUseEquation.setBounds(10, 180, 180, 23);

        jScrollPane1.setViewportView(lstAlgorithms);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 400, 140);

        chkSaveSettings.setSelected(true);
        chkSaveSettings.setText("Save encryption Settings");
        jPanel3.add(chkSaveSettings);
        chkSaveSettings.setBounds(10, 210, 400, 23);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 210, 420, 240);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        jPanel4.add(btnOk);

        btnHelp.setText("Help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        jPanel4.add(btnHelp);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel4.add(btnCancel);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(10, 450, 420, 40);

        jPanel5.setBackground(java.awt.Color.orange);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setLayout(null);

        lblCaption.setBackground(java.awt.Color.orange);
        lblCaption.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblCaption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCaption.setText("ENCRYPTION CODE");
        lblCaption.setOpaque(true);
        jPanel5.add(lblCaption);
        lblCaption.setBounds(10, 10, 370, 20);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(10, 20, 420, 40);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-435)/2, (screenSize.height-499)/2, 435, 499);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        boolean codecorrect=getActualCode();  
        if(codecorrect==false) return;
        if(checkForEquUsed()==true) {             
            killWindow();
        }
}//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        codeobject=null;
        killWindow();       
}//GEN-LAST:event_btnCancelActionPerformed

    private void btnSelectAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAlgorithmActionPerformed
        this.setAlgorithm();
}//GEN-LAST:event_btnSelectAlgorithmActionPerformed

    private void btnUseEquationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUseEquationActionPerformed
        getEquationForCode();                
    }//GEN-LAST:event_btnUseEquationActionPerformed

    private void btnHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHintActionPerformed
        if(this.dialogtype==ENCRYPTION_DIALOG) {
            this.setHintForCode();
        }
        else if(this.dialogtype==DECRYPTION_DIALOG) {            
            this.showHintForCode();
        }
    }//GEN-LAST:event_btnHintActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        QuickHelpViewer viewer=new QuickHelpViewer(new JFrame(),true);
        viewer.setContentFile(new java.io.File(new GeneralMethods().getApplicationPath()+"settings/codedialoghelp.html"));
        viewer.setVisible(true);
}//GEN-LAST:event_btnHelpActionPerformed
      
    // function to check if the equation was entered for the decryption
    private boolean checkForEquUsed() {        
        // if the details are not saved for decryption or the equation not used for
        // encryption then return true;
        if(codeobject.isDetailssaved()==false||this.equUsed==false) {
            return true;
        }
        else {
            if(codeobject.isEquused()==false) {
                String msg="This file was encrypted using a equation too.\n"+
                        "So to decrypt it you need to provide the equation also.\n"+
                        "Decrypting without equation may produce undesired result.\n"+
                        "Do you want to continue with code only?";
                int retval=javax.swing.JOptionPane.showConfirmDialog(
                        null, msg, "Confirm",javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
                if(retval==javax.swing.JOptionPane.YES_OPTION) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    // function to clear all the code values stored here
    private void clearAllValues() {
        this.algorithmsused=null;
        lstAlgorithmsModel.removeAllElements();
        this.hint=null;
        this.equUsed=false;
        this.equvalue=null;
        this.equationstring=null;
    }
    
    
    // function to get the code from the txtCode textfield
    private String getCode() {
        char ccode[]=txtCode.getPassword();
        if(ccode.length==0) return "";
        String value=String.copyValueOf(ccode);
        return value;
    }
    
    // function to get the re entered code from the txtReCode textfield
    public String getReCode() {
        char ccode[]=txtReCode.getPassword();
        if(ccode.length==0) return"";
        String value=String.copyValueOf(ccode);
        return value;
    }
    
    
    // function to set the appropriate dialog according to the dialogtype
    // if type==1 then encryption code
    // if type==2 then decryption code
    protected void setDialogType(int dialogtype) {
        this.dialogtype=dialogtype;
        if(dialogtype==ENCRYPTION_DIALOG) {
            showAscodeDialog();            
        }  
        else {
            showAsDecryptionCodeDialog();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CodeDialog dialog = new CodeDialog(new javax.swing.JFrame(), true,1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                   
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // function to set the code object 
    public void setCodeObject(CodeObject object) {
        if(object==null) object=new CodeObject();
        this.codeobject=object;
        this.hint=object.getHint();            
        this.equUsed=object.isEquused();        
        this.algorithmsused=object.getAlgorithmsused();
    }
    
    // function to set the hint for the code if operation is encryption
    protected void setHintForCode() {        
        String value=JOptionPane.showInputDialog("Enter the hint", hint);
        if(value!=null) {
            hint=value;
        }
    }
    
    // function to show the hint if the operation is decryption
    protected void showHintForCode() {
        String msg="";
        if(!hint.trim().equals("")) {
              msg="HINT FOR THE CODE: \n\n"+
                   hint;            
        }
        else {
            msg="No hint set for the code !!!!!!!!!!";
        }
        JOptionPane.showMessageDialog(null, msg,"        at com.megaware.multipleencrypter.frames.CodeDialog.showDialog(CodeDialog.java:421)HINT FOR CODE",
                    JOptionPane.INFORMATION_MESSAGE);
    }
    
    // function to set the alogrithm by selecting from the selectalgorithmdialog
    protected void setAlgorithm() {
        if(this.dialogtype==DECRYPTION_DIALOG&&codeobject.isDetailssaved()&&algorithmsused.size()>0) {
            String msg="This file seems to encrypted using algorithm(s) ";
            for (int i = 0; i < algorithmsused.size(); i++) {
                Object object = algorithmsused.elementAt(i);
                msg+=object.toString()+"\n";
            }           
            msg+=  "If you tried it to decrypt using any other algorithm the file may\n"+
                    "become  errorsome.\n"+
                    "Dos you want to continue anyway?.";
            int retval=JOptionPane.showConfirmDialog(null, msg,"IMPORTANT",
                    JOptionPane.YES_NO_CANCEL_OPTION);
            if(retval!=JOptionPane.YES_OPTION) {
                return;
            }
            
        }
        SelectAlgorithmDialog dialog=new SelectAlgorithmDialog(new JFrame(),true);
        if( algorithmsused!=null&&algorithmsused.size()!=0) {
            dialog.setEditAlgorithms(algorithmsused);
        }
        Vector algs=dialog.showDialog();
        if(algs!=null) {
            algorithmsused=algs;
            setAlgorithmsVectorForModel(algorithmsused);
        }
    }
    
    // function to sh        at com.megaware.multipleencrypter.frames.CodeDialog.showDialog(CodeDialog.java:423)ow dialog 
    // now return the code as string after that return object
    public CodeObject showDialog() {       
        
        // check if the details of the encryption were saved during encryption ,
        // if not show the information and skip rest of code
        if(dialogtype==DECRYPTION_DIALOG) {
           if(codeobject.isDetailssaved()==false) {
                String msg="The details of this encryption such as , the algorithm(s) used,\n"+
                        "the hint set and whether equation used etc are not saved.\n"+
                        "You need to specify them individually and if they are incorrect,\n"+
                        "the file may become corrupted.";
                javax.swing.JOptionPane.showMessageDialog(null, msg);
           }
           else if(this.algorithmsused!=null&&this.algorithmsused.size()>0) {
                setAlgorithmsVectorForModel(algorithmsused);           
           }
           else {                
                String msg="The algorithm used to encrypt the file is not available.\n"+
                    "Using the default algorithm.";
                javax.swing.JOptionPane.showMessageDialog(null, msg);                            
                // get the default algorithm
                setDefaultAlgorithm();                           
            }  
           
           // hint for decryption state
           if(!codeobject.getHint().equals("")) {
               btnHint.setEnabled(true);               
           }
           else {
               btnHint.setEnabled(false);
               btnHint.setText("No hint set !!!");
           }
        }                           
        setModal(true);
        setVisible(true);
        dispose();                        
        return codeobject;
    }
    
    // function to set the default algorithm
    protected void setDefaultAlgorithm() {
        algorithmsused=new Vector();
        algorithmsused.addElement(new SingleEncryptionAlgorithmMethods().getDefaultAlgorithm().getAlgname());
        setAlgorithmsVectorForModel(algorithmsused);                              
    }
    
    // function to set the algorithms vectoralgorithmsused
    protected void setAlgorithmsVectorForModel(Vector data) {
        if(lstAlgorithmsModel==null) {
            lstAlgorithmsModel=new javax.swing.DefaultListModel();
        }
        lstAlgorithmsModel.removeAllElements();
        for (int i = 0; i < data.size(); i++) {
            Object object = data.elementAt(i);
            lstAlgorithmsModel.addElement(object);
        }
    }
    
    // function to get the algorithms hierarchy
    protected Vector getAlgorithms() {
        algorithmsused=new Vector();
        for (int i = 0; i < lstAlgorithmsModel.getSize(); i++) {
            Object object = (Object) lstAlgorithmsModel.getElementAt(i);
            algorithmsused.addElement(object);
        }
        return algorithmsused;
    }
            
    
    // function to get the code after the checking procedures 
    // this is the actual code that will be used for encrytpion or decryption
    protected boolean getActualCode() {
        boolean codecorrect=false;
        int retval=this.codeValidityCheck();      
        if(retval==0) {
            System.out.println("equvalue "+equvalue);
            codeobject=new CodeObject();
            System.out.println("codee "+code);
            codeobject.setCode(code);
            codeobject.setAlgorithmsused(getAlgorithms());
            codeobject.setEquationvalue(equvalue);  
            codeobject.setDetailssaved(chkSaveSettings.isSelected());
            if(equvalue.compareTo(new BigDecimal("0"))!=0) {
                codeobject.setEquused(true);
            }
            else {
                codeobject.setEquused(false);
            }            
            codeobject.setHint(hint);                      
            codecorrect=true;
        }
        return codecorrect;
    }

    // function to set the dialog to decryption code dialog    
    private void showAsDecryptionCodeDialog() {
        setEncryptionComponentState(false);
        btnHint.setText("Show Hint");
        lblCaption.setText("DECRYPTION CODE DIALOG");        
    }
    
    // function to set the state of the encryption components 
    private void showAscodeDialog() {
        setEncryptionComponentState(true);        
        btnHint.setText("Set hint for the code");
        lblCaption.setText("ENCRYPTION CODE DIALOG");
        setDefaultAlgorithm();
    }
    
    // function to set the state of the Encryption Dialog component state
    protected void setEncryptionComponentState(boolean flag) {
         lblReCode.setVisible(flag);
         txtReCode.setVisible(flag);             
         chkSaveSettings.setVisible(flag);
    }     
    
    // function to hide and dispose the window
    protected void killWindow() {
        setVisible(false);
        setModal(false);     
        this.clearAllValues();        
    }
    
    
    // function to provide alphabet in the code with randomly assinged values 
    private void addValueForLetter(char c)
    {            
            switch(c)
            {
                    case 'A':code=code.multiply(new BigDecimal("111"));break;
                    case 'B':code=code.multiply(new BigDecimal("120"));break;
                    case 'C':code=code.multiply(new BigDecimal("190"));break;
                    case 'D':code=code.multiply(new BigDecimal("115"));break;
                    case 'E':code=code.multiply(new BigDecimal("129"));break;
                    case 'F':code=code.multiply(new BigDecimal("137"));break;
                    case 'G':code=code.multiply(new BigDecimal("140"));break;
                    case 'H':code=code.multiply(new BigDecimal("197"));break;
                    case 'I':code=code.multiply(new BigDecimal("170"));break;
                    case 'J':code=code.multiply(new BigDecimal("311"));break;
                    case 'K':code=code.multiply(new BigDecimal("241"));break;
                    case 'L':code=code.multiply(new BigDecimal("521"));break;
                    case 'M':code=code.multiply(new BigDecimal("412"));break;
                    case 'N':code=code.multiply(new BigDecimal("566"));break;
                    case 'O':code=code.multiply(new BigDecimal("311"));break;
                    case 'P':code=code.multiply(new BigDecimal("476"));break;
                    case 'Q':code=code.multiply(new BigDecimal("139"));break;
                    case 'R':code=code.multiply(new BigDecimal("256"));break;
                    case 'S':code=code.multiply(new BigDecimal("348"));break;
                    case 'T':code=code.multiply(new BigDecimal("499"));break;
                    case 'U':code=code.multiply(new BigDecimal("500"));break;
                    case 'V':code=code.multiply(new BigDecimal("79"));break;
                    case 'W':code=code.multiply(new BigDecimal("121"));break;
                    case 'X':code=code.multiply(new BigDecimal("66"));break;
                    case 'Y':code=code.multiply(new BigDecimal("171"));break;
                    case 'Z':code=code.multiply(new BigDecimal("133"));break;

                    case 'a':code=code.multiply(new BigDecimal("344"));break;
                    case 'b':code=code.multiply(new BigDecimal("82"));break;
                    case 'c':code=code.multiply(new BigDecimal("525"));break;
                    case 'd':code=code.multiply(new BigDecimal("900"));break;
                    case 'e':code=code.multiply(new BigDecimal("228"));break;
                    case 'f':code=code.multiply(new BigDecimal("349"));break;
                    case 'g':code=code.multiply(new BigDecimal("699"));break;
                    case 'h':code=code.multiply(new BigDecimal("488"));break;
                    case 'i':code=code.multiply(new BigDecimal("910"));break;
                    case 'j':code=code.multiply(new BigDecimal("188"));break;
                    case 'k':code=code.multiply(new BigDecimal("364"));break;
                    case 'l':code=code.multiply(new BigDecimal("777"));break;
                    case 'm':code=code.multiply(new BigDecimal("334"));break;
                    case 'n':code=code.multiply(new BigDecimal("656"));break;
                    case 'o':code=code.multiply(new BigDecimal("787"));break;
                    case 'p':code=code.multiply(new BigDecimal("307"));break;
                    case 'q':code=code.multiply(new BigDecimal("408"));break;
                    case 'r':code=code.multiply(new BigDecimal("565"));break;
                    case 's':code=code.multiply(new BigDecimal("299"));break;
                    case 't':code=code.multiply(new BigDecimal("300"));break;
                    case 'u':code=code.multiply(new BigDecimal("17"));break;
                    case 'v':code=code.multiply(new BigDecimal("64"));break;
                    case 'w':code=code.multiply(new BigDecimal("801"));break;
                    case 'x':code=code.multiply(new BigDecimal("404"));break;
                    case 'y':code=code.multiply(new BigDecimal("67"));break;
                    case 'z':code=code.multiply(new BigDecimal("100"));break;
                default:return;
            }
    }
    
    // function to validate the code entered in the code field
    public int codeValidityCheck()
    {

        try {
            
            // for encryption dialog check if the first and the reentered code are same
            if(dialogtype==1&&!getCode().equals(getReCode())){
                JOptionPane.showMessageDialog(this,"Code Mismatch between actual"+
                        " code and re entered code");
                txtReCode.setText("");
                txtReCode.requestFocus();
                return -1;                
            }
            
            // empty code
            if(getCode().equals("")) {
                JOptionPane.showMessageDialog(this,"Empty Code");
                return -1;
            }
                        
            boolean notvalidchar=false;
            String temp;
            temp=getCode();

            int len=temp.length();
            // array to hold the contents of the temp file as character array
            char carrtemp[]=new char[len];
            
            // array to hold the digits in the code
            char codedigits[]=new char[len];
            int codelen=0;
            carrtemp=temp.toCharArray();
            
            // check whether the code contains characters other than digits and
            // letters and also copy the digits to a seperate array to 
            // check its range
            for(int i=0;i<len;i++)
            {
                if(Character.isLetterOrDigit(carrtemp[i])==false)
                {
                        notvalidchar=true;
                        break;
                }
                else if(Character.isDigit(carrtemp[i]))
                {
                        codedigits[codelen]=carrtemp[i];
                        codelen++;
                }
            }

            
            temp="";
            for(int i=0;i<codelen;i++)
                temp=temp+Character.toString(codedigits[i]);            
            
            // if there are no digits then set it to 1
            if(temp.equals("")) 
                temp="1";
            
            code=new BigDecimal(temp);
            int err=temp.indexOf(" ");
                if(getCode().equals("")==true||err!=-1) {                
                String mes="Please enter a valid code  without blankspaces.\n " +
                "The value of numerical code should not be 0"+
                "\nYou can have either code containing numbers only like 1928273213 or code with\n"+
                "numbers and alphabets like eg:7Au9EwS98UT3M9I0P2Q0c43 or just characters\n";
                JOptionPane.showMessageDialog(this,mes,"Error",0);
                txtCode.requestFocus();
                return -1;

           }
           else if(notvalidchar==true) {
           
                String mes="The code should contain only numbers and alphabets.\n" +
                        "No special characters or blankspaces are allowed\n" +
                        "The entered code contains a special character.Please remove it."+                
                "\nYou can have either code containing numbers only like 1928273213 or code with\n"+
                "numbers and alphabets like eg:7Au9EwS98UT3M9I0P2Q0c43 or just characters\n";
                JOptionPane.showMessageDialog(this,mes,"Error",0);
                txtCode.requestFocus();
                return -1;
            }                                    
            else if(lstAlgorithmsModel.getSize()==0) {
                String msg="No algorithms selected!!!";
                JOptionPane.showMessageDialog(this,msg,"Error",0);                
                return -1;
            }     
            else{                
                
                // create the code from the values of the
                createCode(temp,carrtemp);
                if( code.compareTo(new BigDecimal("0"))<=0)
                {
                    String mes="The value of numerical code should  be greater than 0"+
                    "\nYou can have either code containing numbers only like 1928273213 or code with\n"+
                    "numbers and alphabets like eg:7Au9EwS98UT3M9I0P2Q0c43 or just characters\n";               
                    JOptionPane.showMessageDialog(this,mes,"Error",0);
                    txtCode.requestFocus();
                    return -1;
                }                   
            }        
            return 0;
            }catch(Exception e){
                e.printStackTrace();
                String msg="Error creating code.\n"                +
                        e.getMessage()+"\n"+
                        "Code creation failed!!!!!!!!!";
               new GeneralMethods().showErrorMessage(msg);
            }
            return 0;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnHint;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSelectAlgorithm;
    private javax.swing.JButton btnUseEquation;
    private javax.swing.JCheckBox chkSaveSettings;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCaption;
    private javax.swing.JLabel lblReCode;
    private javax.swing.JList lstAlgorithms;
    private javax.swing.JPasswordField txtCode;
    private javax.swing.JPasswordField txtReCode;
    // End of variables declaration//GEN-END:variables
    
    // CONSTANT VALUE FOR ENCRYPTION DIALOG
    public static int ENCRYPTION_DIALOG=1;
    
    // CONSTANT VALUE FOR THE DECRYPTION DIALOG
    public static int DECRYPTION_DIALOG=2;
    
    // list model for the algorithms
    private javax.swing.DefaultListModel lstAlgorithmsModel =new javax.swing.DefaultListModel();
    
    private int dialogtype ;
    private boolean equUsed=false;
    private BigDecimal code=new BigDecimal("1");
    private BigDecimal equvalue=new BigDecimal("0");
    private String hint="";
    private Vector algorithmsused= new Vector();
    
    // The string representation of equation used to restore for editing
    private String equationstring="";
    
    //  the code object that is being returned
    private CodeObject codeobject;
}
