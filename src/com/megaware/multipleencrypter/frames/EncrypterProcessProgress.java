/*
 * EncrypterProcessProgress.java
 *
 * Created on March 29, 2008, 9:09 PM
 */

package com.megaware.multipleencrypter.frames;

import com.megaware.multipleencrypter.algorithms.Algorithm;
import java.util.Vector;

/**
 *
 * @author  sandeep
 */
public class EncrypterProcessProgress extends javax.swing.JDialog {
    
    /** Creates new form EncrypterProcessProgress */
    public EncrypterProcessProgress(java.awt.Frame parent, boolean modal,int dialogtype) {
        super(parent, modal);
        initComponents();
        this.setDialogType(dialogtype);
        this.setInitialState();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblDialogCaption = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        pbarProcess = new javax.swing.JProgressBar();
        lblProgressCaption = new javax.swing.JLabel();
        lblCurrProcessInformation = new javax.swing.JLabel();
        pbarFileProcess = new javax.swing.JProgressBar();
        lblFileProcessCaption = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblTimeCaption = new javax.swing.JLabel();
        pbarTime = new javax.swing.JProgressBar();
        jPanel5 = new javax.swing.JPanel();
        btnPause = new javax.swing.JButton();
        btnResume = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setUndecorated(true);

        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(java.awt.Color.orange);
        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel4.setLayout(new java.awt.BorderLayout());

        lblDialogCaption.setBackground(javax.swing.UIManager.getDefaults().getColor("tab_highlight_header_fill"));
        lblDialogCaption.setFont(new java.awt.Font("Tahoma", 1, 12));
        lblDialogCaption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDialogCaption.setText("<PROCESS> PROGRESSS");
        lblDialogCaption.setOpaque(true);
        jPanel4.add(lblDialogCaption, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Progress"));
        jPanel2.setLayout(null);
        jPanel2.add(pbarProcess);
        pbarProcess.setBounds(10, 80, 410, 20);

        lblProgressCaption.setText("Progress Caption");
        jPanel2.add(lblProgressCaption);
        lblProgressCaption.setBounds(10, 60, 410, 17);

        lblCurrProcessInformation.setText("PROCESS INFORMATION");
        jPanel2.add(lblCurrProcessInformation);
        lblCurrProcessInformation.setBounds(10, 30, 420, 17);
        jPanel2.add(pbarFileProcess);
        pbarFileProcess.setBounds(10, 140, 410, 20);

        lblFileProcessCaption.setText("File process");
        jPanel2.add(lblFileProcessCaption);
        lblFileProcessCaption.setBounds(10, 120, 350, 17);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 30, 440, 170);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Time"));
        jPanel3.setLayout(null);

        lblTimeCaption.setText("Time Remaining");
        jPanel3.add(lblTimeCaption);
        lblTimeCaption.setBounds(10, 20, 410, 17);
        jPanel3.add(pbarTime);
        pbarTime.setBounds(10, 40, 410, 20);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 210, 440, 70);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        jPanel5.add(btnPause);

        btnResume.setText("Resume");
        btnResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResumeActionPerformed(evt);
            }
        });
        jPanel5.add(btnResume);

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        jPanel5.add(btnStop);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(10, 290, 440, 40);

        jPanel6.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-464)/2, (screenSize.height-374)/2, 464, 374);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
       this.pauseProcess();
}//GEN-LAST:event_btnPauseActionPerformed

    private void btnResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResumeActionPerformed
        this.resumeProcess();
}//GEN-LAST:event_btnResumeActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        stopProcess();
    }//GEN-LAST:event_btnStopActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EncrypterProcessProgress dialog = new EncrypterProcessProgress(new javax.swing.JFrame(), true,0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // function to set the initial state of the buttons
    protected void setInitialState() {
        btnPause.setEnabled(true);
        btnResume.setEnabled(false);
        btnStop.setEnabled(true);                
    }
    // function to set the current process ENCRYPTION OR DECRYPTION
    public void setProcessType(String currentProcess) {
        this.currentProcess=currentProcess;
        if(currentProcess.startsWith("ENCRYPTION")) {
            processCaption="Encrypting";
        }
        else {
            processCaption="Decrypting";
        }      
    }
    
    // function to set data
    public void setProcessData(String currentProcess,int maximumchars,
            int maximumtime) {
        resetProcessValues();        
        this.setProcessType(currentProcess);
        this.maximumchars=maximumchars;
        this.maximumtime=maximumtime;          
        this.pbarProcess.setMaximum(maximumchars);       
        this.pbarTime.setMaximum(maximumtime);    
        this.pbarTime.setValue(maximumtime);
        this.currTimeProgressValue=maximumtime;
        this.lblDialogCaption.setText(currentProcess +" PROGRESS ");                     
    }
    
    // function to set the currently encrypting or decrypting filename
    public void setCurrFileName(String filename) {
        this.lblCurrProcessInformation.setText("Currently "+processCaption+" "+filename);
    }
    
    // function to set the dialogtyp // folder or singlefile
    protected void setDialogType(int dialogtype) {
        EncrypterProcessProgress.dialogtype=dialogtype;
        if(dialogtype==0) {
            //showOnlyProcess Information
            this.setFileEncryptionProcessComponentState(false);
        }
        else {
            this.setFileEncryptionProcessComponentState(true);
        }
    }
    
    // function to set the state of the file encryption process components
    protected void setFileEncryptionProcessComponentState(boolean state) {
        this.pbarFileProcess.setVisible(state);
        this.lblFileProcessCaption.setVisible(state);
        
    }
    
    // function to set the data for the file progress
    public void setFileProgressData(int maxfiles,Vector files) {
        this.resetFileProcessValues();
        this.maxfiles=maxfiles;
        this.files=files;        
        this.pbarFileProcess.setMaximum(maxfiles);
        
    }
    
    // function to reset the counters and progressbars
    public void resetProcessValues() {
        this.maximumchars=0;
        this.maximumtime=0;
        this.currProcessProgressValue=0;
        this.currTimeProgressValue=0;
        this.pbarProcess.setValue(0);
        this.pbarTime.setValue(0);        
    }
    
    // function to reset the values of file progress
    public void resetFileProcessValues() {
        this.maxfiles=0;
        this.currFileProgressValue=0;
        this.pbarFileProcess.setValue(0);
    }
    
    // function to set the increment process value
    public void incrementProcess() {
        this.currProcessProgressValue++;        
        this.pbarProcess.setValue(this.currProcessProgressValue);        
        this.lblProgressCaption.setText(processCaption +" " +currProcessProgressValue+
                " of " + maximumchars+" "+processingCaption+" ");
        //this.lblTimeCaption.setText("Time Remaining :"+(maximumtime-this.currTimeProgressValue));
        decrementTime();
    }
    
    // function to decrement the time details of the process
    protected void decrementTime() {
        this.currTimeProgressValue-=2;
        this.pbarTime.setValue(this.currTimeProgressValue);
        setTimeCaption();
    }
    
    // function to format the time in microseconds and show it as caption
    private void setTimeCaption() {
            //System.out.println("currtime"+currTimeProgressValue);
        int value=currTimeProgressValue/1000; // seconds representation
        int hours=value/(3600);
        int minutes=(value%(3600))/60;
        int seconds=(value%(3600))%60;
        this.lblTimeCaption.setText(Integer.toString(hours)+" hours "+Integer.toString(minutes)+
                " minutes "+Integer.toString(seconds)+" seconds ");
        
    }
    
    // function to set the file process increment
    public void incrementFileProcess() {
        this.setCurrFileName(files.elementAt(
                this.currFileProgressValue).toString());
        this.currFileProgressValue++;
        this.pbarFileProcess.setValue(this.currFileProgressValue);
        this.lblFileProcessCaption.setText(processCaption+"  "+currFileProgressValue+" of "+
                maxfiles);            
    }
    
    // function to set the algorithm
    public void setAlgorithm(Algorithm alg) {
        this.algorithm=alg;
    }
        
    // function to stop the process
    protected void stopProcess() {
        this.pauseProcess();       
        String msg="This will stop the process and the content will be\n"+
                "restored to the state before process\n"+
                "Do you want to continue anyway?.";
        int retval=javax.swing.JOptionPane.showConfirmDialog(null, msg,"Confirm stopping",
                javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
        this.resumeProcess();
        if(retval==javax.swing.JOptionPane.YES_OPTION) {
            algorithm.setStop(true);
        }
        
    }
    
    // function to pause the process
    protected void pauseProcess() {
        algorithm.pause();
        btnPause.setEnabled(false);
        btnResume.setEnabled(true);
    }
    
    // function to resume the process
    protected void resumeProcess() {
        algorithm.myresume();
        btnPause.setEnabled(true);
        btnResume.setEnabled(false);
    }
    
    // function to set the processing type, characters or shuffles
    public void setProcessingTypeCaption(String caption) {
        processingCaption=caption;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnResume;
    private javax.swing.JButton btnStop;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCurrProcessInformation;
    private javax.swing.JLabel lblDialogCaption;
    private javax.swing.JLabel lblFileProcessCaption;
    private javax.swing.JLabel lblProgressCaption;
    private javax.swing.JLabel lblTimeCaption;
    private javax.swing.JProgressBar pbarFileProcess;
    private javax.swing.JProgressBar pbarProcess;
    private javax.swing.JProgressBar pbarTime;
    // End of variables declaration//GEN-END:variables
    private String currentProcess; //Encryption or Decrytpion
    private  String processCaption;// caption for the process to display in the
    private String processingCaption="characters";// characters or shuffles
    // information jlaber ie, Encryption = Encrypting .....
    private String filename;// current Encryption or DecryptionFileName;
    private int maximumchars;
    private int maximumtime;
    private int maxfiles;
    private Vector files;// vector to hold the files in case of folder encryption
    private int currProcessProgressValue; // current proccess progressbar value
    private int currTimeProgressValue; // current time process progressbar value
    private int currFileProgressValue;// current file progressbar value;
    private static int dialogtype;// 0 ==> single file encryption,// 1 ==> folder encryption  

    
    Algorithm algorithm;
    
}
