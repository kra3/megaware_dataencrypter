/*
 * EquationDialog.java
 *
 * Created on March 9, 2008, 10:31 PM
 */

package com.megaware.multipleencrypter.frames;

import com.megaware.multipleencrypter.methods.GeneralMethods;
import java.math.BigDecimal;
import java.util.Vector;
import javax.swing.JFrame;
    
/**
 *
 * @author  sandeep
 */
public class EquationDialog extends javax.swing.JDialog {
    
    /** Creates new form EquationDialog */
    public EquationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
            
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnPlus = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btnMultiplication = new javax.swing.JButton();
        btnDivision = new javax.swing.JButton();
        btnPower = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtEquation = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Mathematical Operators"));
        jPanel2.setLayout(null);

        btnPlus.setFont(new java.awt.Font("Tahoma", 1, 18));
        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });
        jPanel2.add(btnPlus);
        btnPlus.setBounds(10, 30, 50, 30);

        btnMinus.setFont(new java.awt.Font("Tahoma", 1, 18));
        btnMinus.setText("-");
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });
        jPanel2.add(btnMinus);
        btnMinus.setBounds(100, 30, 50, 30);

        btnMultiplication.setFont(new java.awt.Font("Tahoma", 1, 18));
        btnMultiplication.setText("*");
        btnMultiplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplicationActionPerformed(evt);
            }
        });
        jPanel2.add(btnMultiplication);
        btnMultiplication.setBounds(190, 30, 50, 30);

        btnDivision.setFont(new java.awt.Font("Tahoma", 1, 18));
        btnDivision.setText("/");
        btnDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivisionActionPerformed(evt);
            }
        });
        jPanel2.add(btnDivision);
        btnDivision.setBounds(270, 30, 50, 30);

        btnPower.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnPower.setText("Power");
        btnPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPowerActionPerformed(evt);
            }
        });
        jPanel2.add(btnPower);
        btnPower.setBounds(100, 70, 140, 26);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 80, 340, 110);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Equation"));
        jPanel3.setLayout(null);

        jLabel1.setText("Equation");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(10, 20, 170, 20);
        jPanel3.add(txtEquation);
        txtEquation.setBounds(10, 40, 310, 27);

        jLabel3.setText("To unset use empty equation");
        jPanel3.add(jLabel3);
        jLabel3.setBounds(10, 70, 310, 17);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 200, 340, 110);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new java.awt.GridLayout(1, 0, 10, 0));

        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        jPanel4.add(btnOk);

        btnHelp.setText("Help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        jPanel4.add(btnHelp);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel4.add(btnCancel);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(10, 320, 340, 40);

        jPanel5.setBackground(java.awt.Color.orange);
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setLayout(null);

        jLabel2.setBackground(java.awt.Color.orange);
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Create an equation for the code for more security");
        jPanel5.add(jLabel2);
        jLabel2.setBounds(10, 10, 320, 20);

        jPanel1.add(jPanel5);
        jPanel5.setBounds(10, 20, 340, 40);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-359)/2, (screenSize.height-366)/2, 359, 366);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        this.appendEquationSymbol("+");
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        this.appendEquationSymbol("-");
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btnMultiplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplicationActionPerformed
        this.appendEquationSymbol("*");
    }//GEN-LAST:event_btnMultiplicationActionPerformed

    private void btnDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivisionActionPerformed
        this.appendEquationSymbol("/");
    }//GEN-LAST:event_btnDivisionActionPerformed

    private void btnPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPowerActionPerformed
        this.appendEquationSymbol("^");
    }//GEN-LAST:event_btnPowerActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        this.getEquation();
        
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.equcode=new BigDecimal("0");
        retvalues=null;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        showHelpFile();
    }//GEN-LAST:event_btnHelpActionPerformed
    
    
    // function to set the code upon which the equation values are applied
    public void setCode(BigDecimal code) {
        this.code=code;
    }
    
    // function to set the equation text used while editing
    public void setText(String equationstring) {
        txtEquation.setText(equationstring);
    }
    
    // function to show the dialog and return the equation code
    public Object[] showDialog() {
        setModal(true);
        setVisible(true);
        dispose();
        code=new BigDecimal("0");
        return retvalues;
    }
    
    // function to create the equation and if the equation is ok close the dialog
    protected void getEquation() {
        int equstatus=this.createEquation();
        if(equstatus==0) {
            String msg="The equation is not created.Cannot use this equation";
            javax.swing.JOptionPane.showMessageDialog(null, msg,"ERROR",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else {
            retvalues[0]=equcode;
            retvalues[1]=txtEquation.getText().trim();
            setVisible(false);
            dispose();
        }
    }
    
    // function to append the symbol into the equation text field
    protected void appendEquationSymbol(String symbol)  {
        txtEquation.setText(txtEquation.getText()+symbol);
    }
    
    // function to create the equation 
    // returns 1 if equation is valid
    // returns 0 else
    // returns -1 if equation is cleared ie empty
    protected int createEquation() {       
        equcode=new BigDecimal(code.toString());
        String str=txtEquation.getText().trim();
        if(str.equals("")) {
            // clear the equation
            equcode=new BigDecimal("0");
            return -1;
        }
        Vector equvalues=getEquSymbolsAndOperands();
        boolean validate=validateEquationValues(equvalues);
        if(validate==true) {
            boolean equcreated=applyEquationValues(equvalues);
            if(equcreated==true) {
                return 1;
            }
        }        
        return 0;
    }
    
    
    // function to get the operators and their corresponding operators 
    // from the equation and store them in a vector as string array of 2
    // 1) The operator
    // 2) The Operand
    private Vector getEquSymbolsAndOperands() {
        Vector data=new Vector();
        int index=0;
        
        String equation=txtEquation.getText();
        char equchars[]=new char[equation.length()];
        equation.getChars(index, equation.length(), equchars, index);
        while(index<equation.length()) {
            // to hold symbol and the corresponding operand            
            String equvals[]={"",""};
            // The operator
            equvals[0]=Character.toString(equchars[index]);     
            index++;
            // check if the length of the equation is just one single character
            if(index>=equation.length())return data;
            // get the corresponding operand
            while(!isEquationSymbol(Character.toString(equchars[index]))) {                
                equvals[1]+=Character.toString(equchars[index]);
                index++;
                if(index>=equation.length()) {
                    break;
                }
            }
            data.addElement(equvals);
        }        
        return data;
    }

    // function to make sure that the operand consist of only digits for 0 - 9
    private boolean isValidOperand(String string) {
        char chars[]=new char[string.length()];
        string.getChars(0,string.length(), chars, 0);        
        for (int i = 0; i < chars.length; i++) {
            char c = chars[i];
            if(!(c>=48&&c<=57)) {
                return false;
            }
        }
        return true;

    }
    
    // function to validate the operator and operands 
    private boolean validateEquationValues(Vector equvalues) {
        boolean valid=true;
        String errormsg="";
        // check if the vector is empty
        if(equvalues.size()==0) {
            errormsg="Invalid or Incomplete equation";
        }
        for (int i = 0; i < equvalues.size(); i++) {
            String vals[]=(String [])equvalues.elementAt(i);
            
            // check if operator is a valid equation symbol
            if(!isEquationSymbol(vals[0])) {
                errormsg="operator invalid";
                break;
            }
            
            
            // check if operand is valid 
            if(!isValidOperand(vals[1])) {
                errormsg="invalid character or whitespace in operand for operator "+vals[0];
                break;
            }
            
            // check if operand is empty
            if(vals[1].trim().length()==0) {
                errormsg="empty operand for operator "+vals[0];
                break;
            }                
                        
            // check for empty spaces in the operand
            if(vals[0].indexOf(" ")!=-1) {
                errormsg="Empty space in operand for operator "+vals[0];
                break;
            }
            
            // if the operator is ^ and the base ie, the first digit of operand
            // is 0 then error
            if(vals[0].equals("^")&&vals[1].startsWith("0")) {
                errormsg="The first digit of the operand of ^ operator should not be zero";
                break;
            }                       
            
            // if the operator is ^ and the operand length is less than 2 error
            // ie no power 
            if(vals[0].equals("^")&&vals[1].length()<2) {
                errormsg="The  operand of ^ operator should have atleast 2 digits";
                break;
            }
            
            // if the operator is ^ and the operand length is greater than 5 error
            // takes large time to calculate the power
            if(vals[0].equals("^")&&vals[1].length()>5) {
                errormsg="The  operand of ^ operator should not exceed five digits";
                break;
            }
        }
        
        if(!errormsg.equals("")) {
            valid=false;            
            javax.swing.JOptionPane.showMessageDialog(null,errormsg,"Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        return valid;

    }
    
    // function to apply the operands and operations to the equcode and
    // check for range during each operation
    private boolean applyEquationValues(Vector equvalues) {
        BigDecimal operand;
        for (int i = 0; i < equvalues.size(); i++) {
            String vals[] =(String []) equvalues.elementAt(i);
            operand=new BigDecimal(vals[1]);
            if(vals[0].equals("+")) {               
               equcode=equcode.add(operand);
            }
            else if(vals[0].equals("-")) {
                equcode=equcode.subtract(operand);
            }
            else if(vals[0].equals("*")) {
                equcode=equcode.multiply(operand);
            }
            else if(vals[0].equals("/")) {
                equcode=equcode.divideToIntegralValue(operand);
            }
            else if(vals[0].equals("^")) {
                operand=new BigDecimal(vals[1].substring(0,1));
                int base=Integer.parseInt(vals[1].substring(1));
                equcode.add(operand.pow(base));
            }
            
            //check the range after each operation
            
            // check for lower range
            if(equcode.compareTo(new BigDecimal(0))<=0) {
                String error="Result of equation value has reduced to 0.\n"+
                        "Equation has no effect on processing now !!!\n"+
                        "Decrease the operand values of /,-";
                javax.swing.JOptionPane.showMessageDialog(null,error,"ERROR CREATING EQUATION",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            //check for upper range if equcode is greater than code * 1000
            /* 25_11_08 -   DISABLED THE UPPER RANGE CHECKING OF THE EQUATION.
             * reason -     THE LARGER THE EQUATION THE HIGHER IS ITS STABILITY
            /*
            if(equcode.compareTo(code.multiply(new BigDecimal(1000)))>=0) {
                String error="Result of equation has gone beyond the upper limit.\n"+
                        "Please decrease the value of +,*,^ operands";
                javax.swing.JOptionPane.showMessageDialog(null,error,"ERROR CREATING EQUATION",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            } 
            */            
        }
        return true;

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EquationDialog dialog = new EquationDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // function to check whether the passed parameter is a equation symbol
    private boolean isEquationSymbol(String str) {
       if(str.equals("+")||str.equals("-")||str.equals("*")||str.equals("/")||
               str.equals("^")||str.equals("?")) {
           return true;
       }
       else {
           return false;
       }
    }
    
    // function to show the help file
    protected void showHelpFile() {
        QuickHelpViewer help=new QuickHelpViewer(new JFrame(),true);
        help.setContentFile(new java.io.File(new GeneralMethods().getApplicationPath()+
                "settings/equationdialoghelp.html"));
        help.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDivision;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnMultiplication;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnPower;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField txtEquation;
    // End of variables declaration//GEN-END:variables
    // code upon with equation is made
    private BigDecimal code;
    
    // code created using equation
    private BigDecimal equcode;

    // the object to be returned
    Object retvalues[]=new Object[2];
    

    
}
